// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  courses   Course[]
  demos     DemoRequest[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Course {
  id           Int           @id @default(autoincrement())
  name         String
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  difficulties Difficulty[]
  demos        DemoRequest[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
 
model Difficulty {
  id       Int           @id @default(autoincrement())
  level    String
  courseId Int
  course   Course        @relation(fields: [courseId], references: [id])
  demos    DemoRequest[]
}

model DemoRequest {
  id           Int     @id @default(autoincrement())
  categoryId   Int
  courseId     Int
  difficultyId Int
  slot         String
  status       String  @default("Pending")
  teacher      String?

  category   Category   @relation(fields: [categoryId], references: [id])
  course     Course     @relation(fields: [courseId], references: [id])
  difficulty Difficulty @relation(fields: [difficultyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
